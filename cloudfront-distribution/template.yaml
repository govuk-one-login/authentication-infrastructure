AWSTemplateFormatVersion: '2010-09-09'
Description: >
  devplatform-deploy cloudfront-distribution template version: v1.6.0
  Stack to create a cloudfront distribution, supports the dev-platform fraud-function
  Managed by dev-platform.

Parameters:
  DistributionAlias:
    Description: The DNS name to be used by cloudfront distribution, e.g. your frontend domain
    Type: String
  OriginAlias:
    Description: >
      (Optional) The DNS name of the Origin. If not defined, then the domain is set as origin.{DistributionAlias}
      Example use case: if DistributionAlias has a wildcard i.e. *.account.gov.uk
    Type: String
    Default: ""
  CloudFrontCertArn:
    Description: The ARN for the CloudFront certificate
    Type: String
  AddWWWPrefix:
    Description: Add a 'www' subdomain to the CloudFront distribution
    Type: String
    AllowedValues: ["true", "false"]
    Default: "false"
  FraudHeaderEnabled:
    Description: Adds the fraud header to viewer-requests
    Type: String
    AllowedValues: ["true", "false"]
    Default: "false"
  OriginCloakingHeader:
    Description: The secret value to be used for the origin-cloaking-secret
    Type: String
    NoEcho: true
  PreviousOriginCloakingHeader:
    Description: If rotating secrets, The previous secret value for the origin-cloaking-secret
    Type: String
    NoEcho: true
  CloudFrontWafACL:
    Type: String
    Description: The ARN of the External Global Cloudfront Web ACL.
    AllowedPattern: "(arn:aws:wafv2:.*:.*:global.*)|(none)"
    ConstraintDescription: The service protection ACL must be Global to apply to an Cloudfront, or 'none'
    Default: "none"
  StandardLoggingEnabled:
    Description: Adds standard logging to an S3 bucket
    Type: String
    AllowedValues: ["true", "false"]
    Default: "false"
  ForwardAccessLogsToSplunk:
    Description: >-
      Forward CloudFront access logs to Splunk via CSLS.
      You need to add the ARN of the S3 bucket to CSLS's
      subscription before this will work. This means the
      bucket needs to exist, so you can only enable this
      when updating an existing stack.
      Has no effect if StandardLoggingEnabled is false.
    # See: https://govukverify.atlassian.net/wiki/x/oYC04g
    # Open a PR here: https://github.com/alphagov/centralised-security-logging-service/blob/master/terraform/modules/csls-python-s3/locals.tf
    Type: String
    AllowedValues: ["true", "false"]
    Default: "false"
  DistAliasOne:
    Description: An alias domain for the distribution
    Type: String
    Default: ""
  DistAliasTwo:
    Description: An alias domain for the distribution
    Type: String
    Default: ""
  DistAliasThree:
    Description: An alias domain for the distribution
    Type: String
    Default: ""
  DistAliasFour:
    Description: An alias domain for the distribution
    Type: String
    Default: ""
  DistAliasFive:
    Description: An alias domain for the distribution
    Type: String
    Default: ""
  DistAliasSix:
    Description: An alias domain for the distribution
    Type: String
    Default: ""
  DistAliasSeven:
    Description: An alias domain for the distribution
    Type: String
    Default: ""
  DistAliasEight:
    Description: An alias domain for the distribution
    Type: String
    Default: ""
  DistAliasNine:
    Description: An alias domain for the distribution
    Type: String
    Default: ""
  DistAliasTen:
    Description: An alias domain for the distribution
    Type: String
    Default: ""
  LogDestination:
    Type: String
    Description: "The suffix of the CSLS Kinesis Data Stream for CloudWatch logs. Default: csls_cw_logs_destination_prodpython-2"
    AllowedValues: ["csls_cw_logs_destination_prodpython", "csls_cw_logs_destination_prodpython-2", "none"]
    Default: "csls_cw_logs_destination_prodpython-2"

Conditions:
  CreateWWWPrefix:  !Equals [true, !Ref AddWWWPrefix]
  AddFraudHeader:  !Equals [true, !Ref FraudHeaderEnabled]
  ApplyCloudfrontWaf: !Not [!Equals [!Ref CloudFrontWafACL, "none"]]
  AddStandardLogging: !Equals [true, !Ref StandardLoggingEnabled]
  ForwardStandardLogsToSplunk: !And
    - !Condition AddStandardLogging
    - !Equals [true, !Ref ForwardAccessLogsToSplunk]
  CreateAliasOne: !Not [ !Equals [ "", !Ref DistAliasOne ] ]
  CreateAliasTwo: !Not [ !Equals [ "", !Ref DistAliasTwo ] ]
  CreateAliasThree: !Not [ !Equals [ "", !Ref DistAliasThree ] ]
  CreateAliasFour: !Not [ !Equals [ "", !Ref DistAliasFour ] ]
  CreateAliasFive: !Not [ !Equals [ "", !Ref DistAliasFive ] ]
  CreateAliasSix: !Not [ !Equals [ "", !Ref DistAliasSix ] ]
  CreateAliasSeven: !Not [ !Equals [ "", !Ref DistAliasSeven ] ]
  CreateAliasEight: !Not [ !Equals [ "", !Ref DistAliasEight ] ]
  CreateAliasNine: !Not [ !Equals [ "", !Ref DistAliasNine ] ]
  CreateAliasTen: !Not [ !Equals [ "", !Ref DistAliasTen ] ]
  AddWafACLLogging: !Not [!Equals [!Ref LogDestination, "none"]]
  UseOriginAlias: !Not [!Equals [ "", !Ref OriginAlias ]]

Resources:
# Secrets
  OriginCloakingHeaderSecret:
    #checkov:skip=CKV_AWS_149: Secrets Manager secret is not encrypted using KMS CMK
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: 'Current secret for CloudFront->Origin authentication'
      SecretString: !Ref OriginCloakingHeader
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
  PreviousOriginCloakingHeaderSecret:
    #checkov:skip=CKV_AWS_149: Secrets Manager secret is not encrypted using KMS CMK
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: 'Previous secret for CloudFront->Origin authentication'
      SecretString: !Ref PreviousOriginCloakingHeader
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
# WAF to ensure traffic to Origin is from CloudFront
  CloakingOriginWebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: !Sub '${AWS::StackName}-CloakingOriginWebACL'
      Scope: REGIONAL
      DefaultAction:
          Block: {}
      VisibilityConfig:
          SampledRequestsEnabled: true
          CloudWatchMetricsEnabled: true
          MetricName: !Sub '${AWS::StackName}-CloakingOriginWebACLMetric'
      Rules:
         ##checkov:skip=CKV_AWS_192: Ensure WAF prevents message lookup in Log4j2
          - Name: !Sub '${AWS::StackName}-CloakingOriginRuleSet'
            Priority: 0
            Action:
              Allow: {}
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: !Sub '${AWS::StackName}-CloakingOriginRuleSet'
            Statement:
              OrStatement:
                Statements:
                - ByteMatchStatement:
                    FieldToMatch:
                      SingleHeader:
                        Name: "origin-cloaking-secret"
                    PositionalConstraint: EXACTLY
                    SearchString: !Ref PreviousOriginCloakingHeader
                    TextTransformations:
                      - Priority: 0
                        Type: NONE
                - ByteMatchStatement:
                    FieldToMatch:
                      SingleHeader:
                        Name: "origin-cloaking-secret"
                    PositionalConstraint: EXACTLY
                    SearchString: !Ref OriginCloakingHeader
                    TextTransformations:
                      - Priority: 0
                        Type: NONE

  OriginRequestPolicy:
    Type: AWS::CloudFront::OriginRequestPolicy
    Properties:
      OriginRequestPolicyConfig:
        Name: !Sub "${AWS::StackName}-AllViewerAndNeededCloudFrontHeaders"
        Comment: "Policy that includes all viewer headers, and needed Cloudfront headers for the fraud function"
        CookiesConfig:
          CookieBehavior: "all"
        HeadersConfig:
          HeaderBehavior: "allViewerAndWhitelistCloudFront"
          Headers:
          - "CloudFront-Viewer-JA3-Fingerprint"
          - "CloudFront-Viewer-Country"
          - "CloudFront-Viewer-Address"
          - "CloudFront-Forwarded-Proto"
        QueryStringsConfig:
          QueryStringBehavior: "all"



# CloudFront Distribution
  CloudfrontDistribution:
    #checkov:skip=CKV_AWS_86: No Access Logs setup is required
    #checkov:skip=CKV_AWS_68: No WAF is required
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub "${AWS::StackName}"
        Aliases:
          - !Ref DistributionAlias
          - !If [ CreateWWWPrefix, !Sub "www.${DistributionAlias}", !Ref "AWS::NoValue" ]
          - !If [ CreateAliasOne, !Ref DistAliasOne, !Ref "AWS::NoValue" ]
          - !If [ CreateAliasTwo, !Ref DistAliasTwo, !Ref "AWS::NoValue" ]
          - !If [ CreateAliasThree, !Ref DistAliasThree, !Ref "AWS::NoValue" ]
          - !If [ CreateAliasFour, !Ref DistAliasFour, !Ref "AWS::NoValue" ]
          - !If [ CreateAliasFive, !Ref DistAliasFive, !Ref "AWS::NoValue" ]
          - !If [ CreateAliasSix, !Ref DistAliasSix, !Ref "AWS::NoValue" ]
          - !If [ CreateAliasSeven, !Ref DistAliasSeven, !Ref "AWS::NoValue" ]
          - !If [ CreateAliasEight, !Ref DistAliasEight, !Ref "AWS::NoValue" ]
          - !If [ CreateAliasNine, !Ref DistAliasNine, !Ref "AWS::NoValue" ]
          - !If [ CreateAliasTen, !Ref DistAliasTen, !Ref "AWS::NoValue" ]

        Origins:
          - DomainName: !If [UseOriginAlias, !Ref OriginAlias, !Sub "origin.${DistributionAlias}"]
            OriginPath: ''
            Id: Origin
            CustomOriginConfig:
              OriginProtocolPolicy: 'https-only'
              OriginSSLProtocols:
                - TLSv1.2
            OriginCustomHeaders:
            - HeaderName: "origin-cloaking-secret"
              HeaderValue: !Ref OriginCloakingHeader
        HttpVersion: "http2"
        Enabled: 'true'
        PriceClass: PriceClass_100 #eu/us
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - PATCH
            - POST
            - DELETE
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad #Managed-CachingDisabled
          TargetOriginId: Origin
          OriginRequestPolicyId: !Ref OriginRequestPolicy
          ViewerProtocolPolicy: redirect-to-https
          FunctionAssociations:
          - !If
            - AddFraudHeader
            - EventType: viewer-request
              FunctionARN: !Sub "arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:function/TICFFraudHeadersFunction" #Placed in every account that hosts a frontend
            - !Ref "AWS::NoValue"
        ViewerCertificate:
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only
          AcmCertificateArn: !Ref CloudFrontCertArn
        Logging: !If
          - AddStandardLogging
          - Bucket: !Join
            - "."
            - - !Ref StandardLogsBucket
              - "s3.amazonaws.com"
          - !Ref "AWS::NoValue"
        WebACLId: !If [ApplyCloudfrontWaf, !Ref CloudFrontWafACL, !Ref "AWS::NoValue"]
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-CloudfrontDistribution"
        - Key: "Service"
          Value: "ci/cd"
        - Key: "Source"
          Value: "govuk-one-login/devplatform-deploy/cloudfront-distribution/template.yaml"
  StandardLogsBucket:
    Condition: AddStandardLogging
    Type: AWS::S3::Bucket
    Properties:
      # checkov:skip=CKV_AWS_18:This is the standard logs bucket. It should not log itself.
      BucketName: !Join
        - "-"
        - - !Ref AWS::StackName
          - "standardlogsbucket"
          - Fn::Select:
              - 4
              - Fn::Split:
                  - '-'
                  - Fn::Select:
                      - 2
                      - Fn::Split:
                          - /
                          - Ref: AWS::StackId
      VersioningConfiguration:
        Status: "Enabled"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      NotificationConfiguration:
        QueueConfigurations:
        - !If
          - ForwardStandardLogsToSplunk
          - Event: s3:ObjectCreated:*
            Queue: arn:aws:sqs:eu-west-2:885513274347:cyber-security-s3-to-splunk-prodpython
          - !Ref AWS::NoValue
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-StandardLogsBucket"
        - Key: "Service"
          Value: "ci/cd"
        - Key: "Source"
          Value: "govuk-one-login/devplatform-deploy/cloudfront-distribution/template.yaml"
        - Key: CheckovRulesToSkip
          Value: CKV_AWS_18
  StandardLogsBucketPolicy:
    Condition: AddStandardLogging
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StandardLogsBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowAwsLogDeliveryToLogToS3
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action:
              - s3:PutObject
            Resource: !Sub "${StandardLogsBucket.Arn}/AWSLogs/${AWS::AccountId}/*"
            Condition:
              StringEquals:
                "s3:x-amz-acl": bucket-owner-full-control
                "aws:SourceAccount": !Ref AWS::AccountId
              Bool:
                "aws:SecureTransport": true
          - Sid: AllowAwsLogDeliveryToReadBucketAcl
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action:
              - s3:GetBucketAcl
            Resource: !GetAtt StandardLogsBucket.Arn
            Condition:
              StringEquals:
                "aws:SourceAccount": !Ref AWS::AccountId
              Bool:
                "aws:SecureTransport": true
          - !If
            - ForwardStandardLogsToSplunk
            - Sid: AllowCSLSLambdaRead
              Effect: Allow
              Principal:
                AWS: arn:aws:iam::885513274347:role/csls_prodpython/csls_process_s3_logs_lambda_prodpython
              Action:
                - s3:ListBucket
                - s3:GetObject
              Resource:
                - !GetAtt StandardLogsBucket.Arn
                - !Sub "${StandardLogsBucket.Arn}/*"
            - !Ref AWS::NoValue

  CloakingOriginWebACLCloudWatchLogsGroup:
    Condition: AddWafACLLogging
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Join
        - "-"
        - - aws-waf-logs
          - !Ref AWS::StackName
          - "cloaking"
          - Fn::Select:
              - 4
              - Fn::Split:
                  - '-'
                  - Fn::Select:
                      - 2
                      - Fn::Split:
                          - /
                          - Ref: AWS::StackId
      KmsKeyId: !GetAtt CloakingOriginWebACLLoggingKmsKey.Arn
      RetentionInDays: 30

  CSLSCloudWatchSubscription:
    Condition: AddWafACLLogging
    Type: AWS::Logs::SubscriptionFilter
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - I3042
    Properties:
      DestinationArn: !Sub 'arn:aws:logs:eu-west-2:885513274347:destination:${LogDestination}'
      FilterPattern: ""
      LogGroupName: !Ref CloakingOriginWebACLCloudWatchLogsGroup

  CloakingOriginWebACLLogging:
    Condition: AddWafACLLogging
    Type: AWS::WAFv2::LoggingConfiguration
    Properties:
      ResourceArn: !GetAtt
        - CloakingOriginWebACL
        - Arn
      LogDestinationConfigs:
        - !GetAtt CloakingOriginWebACLCloudWatchLogsGroup.Arn
      LoggingFilter:
        DefaultBehavior: !If [ApplyCloudfrontWaf, DROP, KEEP]
        Filters:
          - Behavior: KEEP
            Conditions:
              - ActionCondition:
                  Action: BLOCK
              - ActionCondition:
                  Action: COUNT
            Requirement: MEETS_ANY

  CloakingOriginWebACLLoggingKmsKeyAlias:
    Condition: AddWafACLLogging
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Join
          - ""
          - - "alias/"
            - Fn::Join:
                - "-"
                - - !Ref AWS::StackName
                  - "CloakingKey"
                  - Fn::Select:
                      - 4
                      - Fn::Split:
                          - "-"
                          - Fn::Select:
                              - 2
                              - Fn::Split:
                                  - "/"
                                  - Ref: AWS::StackId
      TargetKeyId: !Ref CloakingOriginWebACLLoggingKmsKey

  CloakingOriginWebACLLoggingKmsKey:
    Condition: AddWafACLLogging
    Type: AWS::KMS::Key
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub ${AWS::AccountId}
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"

Outputs:
  DistributionId:
    Description: The ID of the distribution.
    Value: !Ref CloudfrontDistribution
    Export:
      Name: !Sub "${AWS::StackName}-DistributionId"

  DistributionDomain:
    Description: AWS assigned domain for the distribution
    Value: !GetAtt CloudfrontDistribution.DomainName
    Export:
      Name: !Sub "${AWS::StackName}-DistributionDomain"

  CloakingSecretArn:
    Description: The ARN of the secret used in the origin-cloaking-secret
    Value: !Ref OriginCloakingHeaderSecret
    Export:
      Name: !Sub "${AWS::StackName}-CloakingSecretARN"

  CloakingOriginWebACLArn:
    Description: The ARN of the WebACL for cloaking the origin
    Value: !GetAtt CloakingOriginWebACL.Arn
    Export:
      Name: !Sub "${AWS::StackName}-CloakingOriginWebACLArn"

  CloudWatchLogsGroupArn:
    Condition: AddWafACLLogging
    Description: ARN of CloudWatch Logs Group for the WebACL that cloaks the origin

    Value: !GetAtt
      - CloakingOriginWebACLCloudWatchLogsGroup
      - Arn
    Export:
      Name: !Sub "${AWS::StackName}-CloakingOriginWAFCloudWatchLogsGroupArn"

  StandardLogsBucketArn:
    Condition: AddStandardLogging
    Description: ARN of S3 bucket containing CloudFront standard logs. Required for CSLS bucket subscription list.

    Value: !GetAtt StandardLogsBucket.Arn
    Export:
      Name: !Sub "${AWS::StackName}-StandardLogsBucketArn"
